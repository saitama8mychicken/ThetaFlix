// JAVASCRIPT

// User class representing a user in the system
class User {
  constructor(id, name) {
    this.id = id;
    this.name = name;
  }
}

// Proposal class representing a proposal for a change or new feature
class Proposal {
  constructor(id, title, description, createdBy) {
    this.id = id;
    this.title = title;
    this.description = description;
    this.createdBy = createdBy;
    this.votes = 0;
  }

  upvote() {
    this.votes++;
  }
}

// Decentralized Governance System
class GovernanceSystem {
  constructor() {
    this.users = [];
    this.proposals = [];
  }

  registerUser(user) {
    this.users.push(user);
  }

  createProposal(title, description, createdBy) {
    const proposalId = this.proposals.length + 1;
    const proposal = new Proposal(proposalId, title, description, createdBy);
    this.proposals.push(proposal);
    console.log(`${createdBy.name} has created a proposal: ${title}`);
  }

  upvoteProposal(proposalId, userId) {
    const proposal = this.proposals.find((p) => p.id === proposalId);
    const user = this.users.find((u) => u.id === userId);

    if (proposal && user) {
      proposal.upvote();
      console.log(`${user.name} has upvoted the proposal: ${proposal.title}`);
    } else {
      console.log(`Invalid proposal or user ID.`);
    }
  }

  viewProposals() {
    console.log("All Proposals:");
    this.proposals.forEach((proposal) => {
      console.log(`Proposal ${proposal.id}: ${proposal.title}`);
      console.log(`Description: ${proposal.description}`);
      console.log(`Votes: ${proposal.votes}`);
      console.log(`Created By: ${proposal.createdBy.name}`);
      console.log("---------------------");
    });
  }
}

// Create a decentralized governance system
const governanceSystem = new GovernanceSystem();

// Create users
const user1 = new User(1, "John");
const user2 = new User(2, "Jane");

// Register users with the governance system
governanceSystem.registerUser(user1);
governanceSystem.registerUser(user2);

// User 1 creates a proposal
governanceSystem.createProposal("New Feature Proposal", "Implement a new feature to enhance user experience.", user1);

// User 2 upvotes the proposal
governanceSystem.upvoteProposal(1, user2.id);

// View all proposals
governanceSystem.viewProposals();
