// FRONTEND ReactJS
// Create a component for content moderation (ContentModeration.js):

import React, { useState } from 'react';

const ContentModeration = () => {
  const [text, setText] = useState('');
  const [isToxic, setIsToxic] = useState(false);

  const handleInputChange = (event) => {
    setText(event.target.value);
  };

  const handleContentModeration = async () => {
    try {
      // Call the Perspective API to analyze the text content
      const response = await fetch(`https://commentanalyzer.googleapis.com/v1alpha1/comments:analyze?key=YOUR_API_KEY`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          comment: {
            text,
          },
          languages: ['en'],
          requestedAttributes: {
            TOXICITY: {},
          },
        }),
      });

      if (response.ok) {
        const { attributeScores } = await response.json();
        const toxicityScore = attributeScores.TOXICITY.summaryScore.value;

        setIsToxic(toxicityScore >= 0.7);
      } else {
        console.error('Content moderation analysis failed');
      }
    } catch (error) {
      console.error('Error occurred during content moderation:', error);
    }
  };

  return (
    <div>
      <h1>Content Moderation</h1>
      <textarea rows="4" cols="50" value={text} onChange={handleInputChange} />

      <button onClick={handleContentModeration}>Analyze</button>

      {isToxic && <p>This content is flagged as toxic.</p>}
    </div>
  );
};

export default ContentModeration;


// BACKEND (Node.js with Express):

const express = require('express');
const fetch = require('node-fetch');
const app = express();

app.use(express.json());

app.post('/api/content-moderation', async (req, res) => {
  const { text } = req.body;

  try {
    // Call the Perspective API to analyze the text content
    const response = await fetch(`https://commentanalyzer.googleapis.com/v1alpha1/comments:analyze?key=YOUR_API_KEY`,

