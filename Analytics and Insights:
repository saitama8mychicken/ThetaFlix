// JAVASCRIPT

// Video class representing a video in the analytics system
class Video {
  constructor(id, title, views = 0, likes = 0, comments = 0, revenue = 0) {
    this.id = id;
    this.title = title;
    this.views = views;
    this.likes = likes;
    this.comments = comments;
    this.revenue = revenue;
  }

  increaseViews() {
    this.views++;
  }

  increaseLikes() {
    this.likes++;
  }

  increaseComments() {
    this.comments++;
  }

  increaseRevenue(amount) {
    this.revenue += amount;
  }
}

// User class representing a user in the analytics system
class User {
  constructor(id, name, videos = []) {
    this.id = id;
    this.name = name;
    this.videos = videos;
  }

  addVideo(video) {
    this.videos.push(video);
  }

  getVideoMetrics(videoId) {
    const video = this.videos.find((v) => v.id === videoId);

    if (video) {
      const metrics = {
        views: video.views,
        likes: video.likes,
        comments: video.comments,
        revenue: video.revenue,
      };

      console.log(`Video Metrics for ${video.title}:`, metrics);
    } else {
      console.log(`Video with ID ${videoId} not found.`);
    }
  }
}

// Create users
const user1 = new User(1, "John");
const user2 = new User(2, "Jane");

// Create videos
const video1 = new Video(1, "Video 1");
const video2 = new Video(2, "Video 2");

// Associate videos with users
user1.addVideo(video1);
user2.addVideo(video2);

// Simulate video interactions
video1.increaseViews();
video1.increaseViews();
video1.increaseLikes();
video1.increaseComments();

video2.increaseViews();
video2.increaseLikes();
video2.increaseComments();
video2.increaseRevenue(50);

// Retrieve video metrics for a user
user1.getVideoMetrics(1);
user2.getVideoMetrics(2);
