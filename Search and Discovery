// HTML Structure

<div class="search-section">
  <form id="search-form">
    <input type="text" id="search-input" placeholder="Search videos" />
    <button type="submit">Search</button>
  </form>

  <h2>Recommended Videos</h2>
  <div id="recommended-videos"></div>

  <h2>Trending Videos</h2>
  <div id="trending-videos"></div>
</div>


// JAVASCRIPT Structure

// Sample video data
const videos = [
  {
    id: 1,
    title: 'Video 1',
    tags: ['tag1', 'tag2'],
    category: 'Category 1',
    views: 1000,
  },
  {
    id: 2,
    title: 'Video 2',
    tags: ['tag2', 'tag3'],
    category: 'Category 2',
    views: 2000,
  },
  // Add more video objects
];

// Get necessary elements
const searchForm = document.getElementById('search-form');
const searchInput = document.getElementById('search-input');
const recommendedVideosContainer = document.getElementById('recommended-videos');
const trendingVideosContainer = document.getElementById('trending-videos');

// Function to perform video search based on keywords, tags, or categories
function searchVideos(query) {
  const filteredVideos = videos.filter((video) => {
    const { title, tags, category } = video;
    const lowerQuery = query.toLowerCase();
    return (
      title.toLowerCase().includes(lowerQuery) ||
      tags.some((tag) => tag.toLowerCase().includes(lowerQuery)) ||
      category.toLowerCase().includes(lowerQuery)
    );
  });

  displayVideos(filteredVideos, 'Search Results');
}

// Function to display videos in a container
function displayVideos(videoList, heading) {
  const videoContainer = document.createElement('div');
  videoContainer.innerHTML = `<h3>${heading}</h3>`;

  videoList.forEach((video) => {
    const videoElement = document.createElement('div');
    videoElement.classList.add('video');
    videoElement.innerHTML = `
      <h4>${video.title}</h4>
      <p>Category: ${video.category}</p>
      <p>Views: ${video.views}</p>
    `;

    videoContainer.appendChild(videoElement);
  });

  return videoContainer;
}

// Function to generate recommended videos based on user preferences
function generateRecommendedVideos() {
  // Add logic to generate personalized recommendations based on user preferences or history
  // Example: select videos with similar tags or categories to user's watched videos

  // For now, let's display a random subset of videos as recommendations
  const recommendedVideos = videos.slice(0, 3);

  return displayVideos(recommendedVideos, 'Recommended Videos');
}

// Function to generate trending videos based on views
function generateTrendingVideos() {
  // Sort videos by views in descending order
  const sortedVideos = videos.sort((a, b) => b.views - a.views);

  // Select the top 3 trending videos
  const trendingVideos = sortedVideos.slice(0, 3);

  return displayVideos
